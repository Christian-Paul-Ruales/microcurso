server.port=8080
spring.application.name=api-gateway
# similar a usar el anotacion @enablediscoveryclient
spring.cloud.gateway.discovery.locator.enabled=true
# eureka
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

spring.cloud.loadbalancer.ribbon.enabled=false

# configuracion de rutas
spring.cloud.gateway.routes[0].id=microcurso
#lb load balancing
spring.cloud.gateway.routes[0].uri=lb://MICROCURSO
# Predicados
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/categories/**, /api/products/**

spring.cloud.gateway.routes[1].id=booking
#lb load balancing
spring.cloud.gateway.routes[1].uri=lb://BOOKING
# Predicados
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/booking/**


spring.cloud.gateway.default-filters=TokenRelay

# Configuraciones para keyclock
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8060/realms/mycompany-microservice-realm
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-id=spring-cloud-gateway-client
spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-secret=uGqtSEWGQJfQ7uBsjjJZjYCMCsSAQ7qn
spring.security.oauth2.client.registration.spring-cloud-gateway-client.provider=keycloak
spring.security.oauth2.client.registration.spring-cloud-gateway-client.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.spring-cloud-gateway-client.scope=openid
spring.security.oauth2.client.registration.spring-cloud-gateway-client.redirect-uri=http://localhost:8080/login/oauth2/code/spring-cloud-gateway-client
